datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator generator {
    provider        = "prisma-client-js"
    previewFeatures = ["createMany"]
}

// PERSONA

model Persona {
    id             Int             @id @default(autoincrement()) @map("id")
    codiceFiscale  String?         @map("codice_fiscale")
    nome           String          @map("nome")
    cognome        String          @map("cognome")
    sesso          Sesso           @map("sesso")
    dataDiNascita  DateTime        @map("data_nascita")
    luogoDiNascita LuogoDiNascita?
    residenza      Residenza?
    domicili       Domicilio[]

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    Presidente Presidente[]
    Ospite     Ospite[]
    @@map("persona")
}

model LuogoDiNascita {
    id          Int     @id @map("id")
    stato       String  @map("stato")
    provincia   String? @map("provincia")
    comune      String  @map("comune")
    istatComune String? @map("istat_comune")
    persona     Persona @relation(fields: [id], references: [id])

    @@map("luogo_di_nascita")
}

model Residenza {
    id Int @id @map("id")

    stato       String  @map("stato")
    provincia   String? @map("provincia")
    comune      String  @map("comune")
    istatComune String? @map("istat_comune")

    cap       String? @map("cap") @db.Char(5)
    indirizzo String  @map("indirizzo")
    nCivico   String  @map("n_civico")
    persona   Persona @relation(fields: [id], references: [id])

    @@map("residenza")
}

model Domicilio {
    id        Int @id @default(autoincrement()) @map("id")
    idPersona Int @map("id_persona")

    stato       String  @map("stato")
    provincia   String? @map("provincia")
    comune      String  @map("comune")
    istatComune String? @map("istat_comune")

    cap       String? @map("cap") @db.Char(5)
    indirizzo String  @map("indirizzo")
    nCivico   String  @map("n_civico")

    persona Persona @relation(fields: [idPersona], references: [id])

    @@map("domicilio")
}

enum Sesso {
    MASCHIO
    FEMMINA
}

model Presidente {
    id                Int      @id @map("id")
    dataInizioMandato DateTime @map("data_inizio_mandato")
    dataFineMandato   DateTime @map("data_fine_mandato")
    firma             String?  @map("firma")
    persona           Persona  @relation(fields: [id], references: [id])

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    @@map("presidente")
}

model Ospite {
    id                 Int                @id @map("id")
    idGiada            Int?               @unique @map("id_giada")
    email              String             @map("email")
    telefonoPrincipale String?            @map("telefono_principale")
    telefonoSecondario String?            @map("telefono_secondario")
    foto               String?            @map("foto")
    cittadinanza       String             @map("cittadinanza")
    contoCorrente      ContoCorrente?
    documentoIdentita  DocumentoIdentita?

    codiceDipartimentoUnitn String?            @map("codice_dipartimento_unitn")
    dipartimentoUnitn       DipartimentoUnitn? @relation(fields: [codiceDipartimentoUnitn], references: [codice])

    possiedeCauzione Boolean @default(false) @map("possiede_cauzione")

    persona Persona @relation(fields: [id], references: [id])

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    contrattiSuOspite ContrattoSuOspite[]
    bollette          Bolletta[]
    @@map("ospite")
}

model ContoCorrente {
    id          Int     @id @map("id")
    iban        String  @map("iban")
    banca       String? @map("banca")
    swiftBic    String? @map("swift_bic")
    aba         String? @map("aba")
    agenzia     String? @map("agenzia")
    transitCode String? @map("transit_code")
    ospite      Ospite  @relation(fields: [id], references: [id])

    @@map("conto_corrente")
}

model DocumentoIdentita {
    id           Int      @id @map("id")
    tipo         String   @map("tipo")
    numero       String   @map("numero")
    ente         String   @map("ente")
    dataScadenza DateTime @map("data_scadenza")
    dataRilascio DateTime @map("data_rilascio")
    documento    String?  @map("documento")
    ospite       Ospite   @relation(fields: [id], references: [id])

    @@map("documento_identita")
}

model DipartimentoUnitn {
    codice    String  @id @map("codice")
    sigla     String? @unique @map("sigla")
    nome      String  @unique @map("nome")
    provincia String  @map("provincia")
    comune    String  @map("comune")
    cap       String  @map("cap") @db.Char(5)
    indirizzo String  @map("indirizzo")
    nCivico   String  @map("n_civico")
    sitoWeb   String  @map("sito_web")

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    Ospite Ospite[]
    @@map("dipartimento_unitn")
}

// FABBRICATO

model Fabbricato {
    id        Int    @id @default(autoincrement()) @map("id")
    codice    String @map("codice")
    nome      String @map("nome")
    provincia String @map("provincia")
    comune    String @map("comune")
    cap       String @map("cap") @db.Char(5)
    indirizzo String @map("indirizzo")
    nCivico   String @map("n_civico")

    oldCode Int @map("old_code")

    idTipoFabbricato Int            @map("id_tipo_fabbricato")
    tipoFabbricato   TipoFabbricato @relation(fields: [idTipoFabbricato], references: [id])

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    stanze Stanza[]
    @@unique([codice])
    @@unique([nome])
    @@map("fabbricato")
}

model TipoFabbricato {
    id             Int    @id @default(autoincrement()) @map("id")
    tipoFabbricato String @unique @map("tipo_fabbricato")

    Fabbricato Fabbricato[]
    Tariffa    Tariffa[]
    @@map("tipo_fabbricato")
}

model Stanza {
    id Int @id @default(autoincrement()) @map("id")

    idFabbricato Int        @map("id_fabbricato")
    fabbricato   Fabbricato @relation(fields: [idFabbricato], references: [id])

    unitaImmobiliare String @map("unita_immobiliare")
    numeroStanza     String @map("numero_stanza")

    idTipoStanza Int        @map("id_tipo_stanza")
    tipoStanza   TipoStanza @relation(fields: [idTipoStanza], references: [id])

    centroDiCosto String @map("centro_di_costo")

    gestioneDiretta Boolean @map("gestione_diretta")
    handicap        Boolean @map("handicap")
    bagno           Boolean @map("bagno")
    piano           Piano?  @map("piano")

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    manutenzioni Manutenzione[]
    postiLetto   PostoLetto[]

    @@unique([idFabbricato, unitaImmobiliare, numeroStanza])
    @@map("stanza")
}

model TipoStanza {
    id         Int    @id @default(autoincrement()) @map("id")
    tipoStanza String @unique @map("tipo_stanza")

    Stanza Stanza[]
    @@map("tipo_stanza")
}

model Manutenzione {
    id Int @id @default(autoincrement()) @map("id")

    idStanza Int    @map("id_stanza")
    stanza   Stanza @relation(fields: [idStanza], references: [id])

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    @@unique([idStanza, eliminato])
    @@map("manutenzione")
}

model PostoLetto {
    id Int @id @default(autoincrement()) @map("id")

    idStanza Int    @map("id_stanza")
    stanza   Stanza @relation(fields: [idStanza], references: [id])

    postoLetto String @map("posto_letto")

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    ContrattoSuOspiteSuPostoLetto ContrattoSuOspiteSuPostoLetto[]
    @@unique([idStanza, postoLetto])
    @@map("posto_letto")
}

enum Piano {
    PIANO_TERRA
    PIANO_RIALZATO
    PRIMO_PIANO
    SECONDO_PIANO
    TERZO_PIANO
    QUARTO_PIANO
    QUINTO_PIANO
    SESTO_PIANO
    SETTIMO_PIANO
    MANSARDA
}

// TARIFFA

model Tariffa {
    id Int @id @default(autoincrement()) @map("id")

    idTipoOspite Int        @map("id_tipo_ospite")
    tipoOspite   TipoOspite @relation(fields: [idTipoOspite], references: [id])

    idUtilizzoStanza Int            @map("id_utilizzo_stanza")
    utilizzoStanza   UtilizzoStanza @relation(fields: [idUtilizzoStanza], references: [id])

    idTipoFabbricato Int            @map("id_tipo_fabbricato")
    tipoFabbricato   TipoFabbricato @relation(fields: [idTipoFabbricato], references: [id])

    idTipoTariffa Int         @map("id_tipo_tariffa")
    tipoTariffa   TipoTariffa @relation(fields: [idTipoTariffa], references: [id])

    prezzoConsumi Float @map("prezzo_consumi")
    prezzoCanoni  Float @map("prezzo_canone")

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    Contratto Contratto[]
    @@unique([idTipoOspite, idUtilizzoStanza, idTipoFabbricato, idTipoTariffa, eliminato])
    @@map("tariffa")
}

model UtilizzoStanza {
    id             Int    @id @default(autoincrement()) @map("id")
    utilizzoStanza String @unique @map("utilizzo_stanza")

    Tariffa Tariffa[]
    @@map("utilizzo_stanza")
}

model TipoOspite {
    id         Int    @id @default(autoincrement()) @map("id")
    sigla      String @unique @map("sigla")
    tipoOspite String @unique @map("tipo_ospite")

    idContoRicaviConsumi Int                @map("id_conto_ricavi_consumi")
    contoRicaviConsumi   ContoRicaviConsumi @relation(fields: [idContoRicaviConsumi], references: [id])

    idContoRicaviCanoni Int               @map("id_conto_ricavi_canoni")
    contoRicaviCanoni   ContoRicaviCanoni @relation(fields: [idContoRicaviCanoni], references: [id])

    Tariffa Tariffa[]
    @@map("tipo_ospite")
}

model TipoTariffa {
    id          Int    @id @default(autoincrement()) @map("id")
    tipoTariffa String @unique @map("tipo_tariffa")

    Tariffa Tariffa[]
    @@map("tipo_tariffa")
}

// CONTRATTO

model Contratto {
    id Int @id @default(autoincrement()) @map("id")

    dataInizio DateTime @map("data_inizio")
    dataFine   DateTime @map("data_fine")

    dataFirmaContratto     DateTime? @map("data_firma_contratto")
    dataContabilizzazione  DateTime? @map("data_contabilizzazione")
    dataChiusuraAnticipata DateTime? @map("data_chiusura_anticipata")

    checkout Float? @map("checkout")

    cauzione Float? @map("cauzione")

    idTipoRata Int      @map("id_tipo_rata")
    tipoRata   TipoRata @relation(fields: [idTipoRata], references: [id])

    idTariffa Int     @map("id_tariffa")
    tariffa   Tariffa @relation(fields: [idTariffa], references: [id])

    idTipoContratto Int           @map("id_tipo_contratto")
    tipoContratto   TipoContratto @relation(fields: [idTipoContratto], references: [id])

    idQuietanziante Int           @map("id_quietanziante")
    quietanziante   Quietanziante @relation(fields: [idQuietanziante], references: [id])

    contrattiSuOspite ContrattoSuOspite[]

    Bolletta Bolletta[]
    @@map("contratto")
}

model ContrattoSuOspite {
    idContratto Int       @map("id_contratto")
    contratto   Contratto @relation(fields: [idContratto], references: [id])

    idOspite Int    @map("id_ospite")
    ospite   Ospite @relation(fields: [idOspite], references: [id])

    dataCheckin          DateTime? @map("data_checkin")
    dataCheckout         DateTime? @map("data_checkout")
    dataConsegnaChiavi   DateTime? @map("data_consegna_chiavi")
    dataConsegnaBadge    DateTime? @map("data_consegna_badge")
    dataConsegnaLenzuola DateTime? @map("data_consegna_lenzuola")

    contrattiSuOspiteSuPostoLetto ContrattoSuOspiteSuPostoLetto[]

    @@id([idContratto, idOspite])
    @@map("contratto_su_ospite")
}

model ContrattoSuOspiteSuPostoLetto {
    idContratto       Int               @map("id_contratto")
    idOspite          Int               @map("id_ospite")
    contrattoSuOspite ContrattoSuOspite @relation(fields: [idContratto, idOspite], references: [idContratto, idOspite])

    idPostoLetto Int        @map("id_posto_letto")
    postoLetto   PostoLetto @relation(fields: [idPostoLetto], references: [id])

    @@id([idContratto, idOspite, idPostoLetto])
    @@map("contratto_su_ospite_su_posto_letto")
}

model TipoRata {
    id       Int    @id @default(autoincrement()) @map("id")
    tipoRata String @unique @map("tipo_rata")

    Contratto Contratto[]
    @@map("tipo_rata")
}

model TipoContratto {
    id Int @id @default(autoincrement()) @map("id")

    idTipoStudente Int          @map("id_tipo_studente")
    tipoStudente   TipoStudente @relation(fields: [idTipoStudente], references: [id])

    sigla String @unique @map("sigla")
    nome  String @unique @map("nome")

    Contratto Contratto[]
    @@map("tipo_contratto")
}

model Quietanziante {
    id            Int    @id @default(autoincrement()) @map("id")
    quietanziante String @unique @map("quietanziante")

    Contratto Contratto[]
    @@map("quietanziante")
}

model TipoStudente {
    id           Int    @id @default(autoincrement()) @map("id")
    tipoStudente String @unique @map("tipo_studente")

    TipoContratto TipoContratto[]
    @@map("tipo_studente")
}

model ContoRicaviConsumi {
    id                 Int    @id @default(autoincrement()) @map("id")
    codice             String @unique @map("codice")
    contoRicaviConsumi String @unique @map("conto_ricavi_consumi")

    TipoOspite TipoOspite[]
    @@map("conto_ricavi_consumi")
}

model ContoRicaviCanoni {
    id                Int    @id @default(autoincrement()) @map("id")
    codice            String @unique @map("codice")
    contoRicaviCanoni String @unique @map("conto_ricavi_canoni")

    TipoOspite TipoOspite[]
    @@map("conto_ricavi_canoni")
}

// BOLLETTA

model Bolletta {
    id Int @id @default(autoincrement()) @map("id")

    numero Int

    importoConsumi Float? @map("importo_consumi")
    importoCanoni  Float? @map("importo_canone")
    importoTotale  Float  @map("importo_totale")

    competanzaAl  DateTime @map("competenza_al")
    competenzaDal DateTime @map("competenza_dal")
    dataScadenza  DateTime @map("data_scadenza")

    dataInvioEusis    DateTime? @map("data_invio_eusis")
    dataRegistrazione DateTime? @map("data_registrazione")

    centroDiCosto      String @map("centro_di_costo")
    contoRicaviConsumi String @map("conto_ricavi_consumi")
    contoRicaviCanoni  String @map("conto_ricavi_canoni")

    idBollettaStornata Int?      @map("id_bolletta_stornata")
    bollettaStornata   Bolletta? @relation(fields: [idBollettaStornata], references: [id])

    idTipoBolletta Int          @map("id_tipo_bolletta")
    tipoBolletta   TipoBolletta @relation(fields: [idTipoBolletta], references: [id])

    idContratto Int       @map("id_contratto")
    contratto   Contratto @relation(fields: [idContratto], references: [id])

    idOspite Int    @map("id_ospite")
    ospite   Ospite @relation(fields: [idOspite], references: [id])

    Bolletta Bolletta[] @relation("BollettaToBolletta")
    @@unique([id, numero])
    @@map("bolletta")
}

model TipoBolletta {
    id           Int    @id @default(autoincrement()) @map("id")
    tipoBolletta String @unique @map("tipo_bolletta")
    importo      Float? @map("importo")

    Bolletta Bolletta[]
    @@map("tipo_bolletta")
}

// NAZIONE / PROVINCIA / COMUNE

model Stato {
    codiceIso String @id @map("codice_iso")

    codiceStato     String @unique @map("codice_stato")
    codiceIstat     String @unique @map("codice_istat")
    codiceIstatInps String @unique @map("codice_istat_inps")
    denominazione   String @unique @map("denominazione")

    Provincia Provincia[]
    @@map("stato")
}

model Provincia {
    sigla String @id @map("sigla")

    denominazione String @unique @map("denominazione")
    regione       String @map("regione")

    codiceStato String @map("codice_stato")
    stato       Stato  @relation(fields: [codiceStato], references: [codiceIso])

    Comune Comune[]
    @@map("provincia")
}

model Comune {
    id Int @id @map("id")

    codiceIstat   String @unique @map("codice_istat")
    denominazione String @unique @map("denominazione")

    siglaProvincia String    @map("sigla_provincia")
    provincia      Provincia @relation(fields: [siglaProvincia], references: [sigla])

    @@map("comune")
}

// UTENTE

model Utente {
    uid                   String      @id @default(uuid()) @map("uid")
    nomeUtente            String      @unique @map("nome_utente")
    password              String      @map("password")
    email                 String      @map("email")
    ruolo                 RuoloUtente @map("ruolo")
    tokenRecuperoPassword String?     @map("token_recupero_password")

    dataCreazione DateTime  @default(now()) @map("_data_creazione")
    eliminato     DateTime? @map("_eliminato")

    Cronologia Cronologia[]

    @@map("utente")
}

enum RuoloUtente {
    ADMIN
    SPORTELLO
    PORTINERIA
    CONTROLLO_ALLOGGI
}

// CRONOLOGIA

model Cronologia {
    id        Int               @id @default(autoincrement()) @map("uid")
    timestamp DateTime          @map("timestamp")
    ip        String            @map("ip")
    uid       String            @map("uid")
    utente    Utente            @relation(fields: [uid], references: [uid])
    azione    CronologiaAzione  @map("azione")
    risorsa   CronologiaRisorsa @map("risorsa")

    @@map("cronologia")
}

enum CronologiaAzione {
    CREATE
    RETRIEVE
    UPDATE
    DELETE
}

enum CronologiaRisorsa {
    OSPITE
    PRESIDENTE
}
